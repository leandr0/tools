d <- dist(mtcars$hp, method = "euclidean", diag = FALSE, upper = FALSE, p = 2)
d
e <- hclust(d, method = "average", members = NULL)
plot(e)
library(fpc)
contourplot()
cars <- mtcars
cars$hp <- NULL
(kc <- kmeans(cars, 3))
table(mtcars$hp, kc$cluster)
kc$cluster
table(kc$cluster)
library(fpc)
install.packages('fpc')
library(fpc)
install.packages('kernlab')
library(fpc)
dbscan(f$Sepal.Length, 3, MinPts = 2, scale = FALSE,
method = c("hybrid","raw","dist"), seeds = TRUE, showplot = FALSE, countmode = NULL)
dbscan(e$hp, 3, MinPts = 2, scale = FALSE,
method = c("hybrid","raw","dist"), seeds = TRUE, showplot = FALSE, countmode = NULL)
contourplot()
install.packages('lattice')
install.packages("lattice")
contourplot()
library(plotly)
contourplot()
contourplot()
library(plotly)
install.packages('plotly')
library(plotly)
contourplot()
contourplot()
contourplot(x,
data,
panel = lattice.getOption("panel.contourplot"),
default.prepanel =
lattice.getOption("prepanel.default.contourplot"),
cuts = 7,
labels = TRUE,
contour = TRUE,
pretty = TRUE,
region = FALSE,
...)
contourplot()
contourplot(x,
data,
panel = lattice.getOption("panel.contourplot"),
default.prepanel =
lattice.getOption("prepanel.default.contourplot"),
cuts = 7,
labels = TRUE,
contour = TRUE,
pretty = TRUE,
region = FALSE)
contourplot()
library(lattice)
contourplot()
contourplot(x,
data,
panel = lattice.getOption("panel.contourplot"),
default.prepanel =
lattice.getOption("prepanel.default.contourplot"),
cuts = 7,
labels = TRUE,
contour = TRUE,
pretty = TRUE,
region = FALSE)
contourplot()
contourplot(mtcars)
c <-mtcars
dim(mtcars)
mtcars
hist(mtcars$hp)
density(mtcars$hp)
plot(density(mtcars$hp))
barplot(mtcars$hp)
pie(table(mtcars$hp))
cor(mtcars$hp, mtcars$qsec)
cor(mtcars$hp, mtcars$mpg)
cor(mtcars$hp, mtcars$wt)
boxplot(mtcars$hp)
pairs(mtcars)
kmeans(mtcars$hp, 5, iter.max = 10, nstart = 1,algorithm = c("Hartigan-Wong", "Lloyd", "Forgy","MacQueen"), trace=FALSE)
d <- dist(mtcars$hp, method = "euclidean", diag = FALSE, upper = FALSE, p = 2)
d
e <- hclust(d, method = "average", members = NULL)
plot(e)
library(fpc)
dbscan(e$hp, 3, MinPts = 2, scale = FALSE,
method = c("hybrid","raw","dist"), seeds = TRUE, showplot = FALSE, countmode = NULL)
cars <- mtcars
cars$hp <- NULL
(kc <- kmeans(cars, 3))
table(mtcars$hp, kc$cluster)
c <-mtcars
(kc <- kmeans(c,3))
kc$cluster
table(kc$cluster)
kc
kc
dbscan(e$hp, 3, MinPts = 2, scale = FALSE,
method = c("hybrid","raw","dist"), seeds = TRUE, showplot = FALSE, countmode = NULL)
dbscan(mtcars$hp, 3, MinPts = 2, scale = FALSE,
method = c("hybrid","raw","dist"), seeds = TRUE, showplot = FALSE, countmode = NULL)
dbscan(d$hp, 3, MinPts = 2, scale = FALSE,
method = c("hybrid","raw","dist"), seeds = TRUE, showplot = FALSE, countmode = NULL)
dbscan(mtcars$hp, 3, MinPts = 2, scale = FALSE,
method = c("hybrid","raw","dist"), seeds = TRUE, showplot = FALSE, countmode = NULL)
contourplot()
c <-mtcars
dim(c)
c
hist(c$hp)
density(c$hp)
plot(density(c$hp))
barplot(c$hp)
pie(table(c$hp))
cor(c$hp, c$qsec)
cor(c$hp, c$mpg)
cor(c$hp, c$wt)
boxplot(c$hp)
pairs(c)
kmeans(c$hp, 5, iter.max = 10, nstart = 1,algorithm = c("Hartigan-Wong", "Lloyd", "Forgy","MacQueen"), trace=FALSE)
d <- dist(c$hp, method = "euclidean", diag = FALSE, upper = FALSE, p = 2)
d
e <- hclust(d, method = "average", members = NULL)
plot(e)
library(fpc)
dbscan(c$hp, 3, MinPts = 2, scale = FALSE,
method = c("hybrid","raw","dist"), seeds = TRUE, showplot = FALSE, countmode = NULL)
cars <- mtcars
cars <- c
cars$hp <- NULL
(kc <- kmeans(cars, 3))
table(c$hp, kc$cluster)
c <-mtcars
(kc <- kmeans(c,3))
kc
kc$cluster
table(kc$cluster)
a <-iris
dim(a)
dim(i)
i <-iris
dim(i)
a <- NULL
dim(i)
hist(i$Sepal.Length)
density(i$Sepal.Length)
plot(density(i$Sepal.Length))
barplot(i$Sepal.Length)
pie(table(i$Species))
cor(i$Sepal.Length, i$Petal.Length)
cor(i$Sepal.Length, i$Petal.Length)
cor(i$Petal.Width, i$Sepal.Width)
boxplot(i$Sepal.Length)
pairs(i)
kmeans(i$Sepal.Length, 5, iter.max = 10, nstart = 1,algorithm = c("Hartigan-Wong", "Lloyd", "Forgy","MacQueen"), trace=FALSE)
d <- dist(i$Petal.Width, method = "euclidean", diag = FALSE, upper = FALSE, p = 2)
d
e <- hclust(d, method = "average", members = NULL)
plot(e)
library(fpc)
dbscan(f$Sepal.Length, 3, MinPts = 2, scale = FALSE,
method = c("hybrid","raw","dist"), seeds = TRUE, showplot = FALSE, countmode = NULL)
dbscan(i$Sepal.Length, 3, MinPts = 2, scale = FALSE,
method = c("hybrid","raw","dist"), seeds = TRUE, showplot = FALSE, countmode = NULL)
newiris <- i
newiris$Species <- NULL
(kc <- kmeans(newiris, 3))
kc$cluster
table(kc$cluster)
table(i$Species, kc$cluster)
table(i$Species, kc$cluster)
table(i$Species, kc$cluster)
kc$cluster
table(i$Species, kc$cluster)
hist(c$hp)
mc <-mtcars
dim(mc)
mc
hist(mc$hp)
mc <-mtcars
hist(mc$hp)
density(mc$hp)
plot(density(mc$hp))
barplot(mc$hp)
cor(mc$hp, mc$qsec)
cor(mc$hp, mc$mpg)
cor(mc$hp, mc$wt)
boxplot(mc$hp)
pairs(mc)
kmeans(mc$hp, 5, iter.max = 10, nstart = 1,algorithm = c("Hartigan-Wong", "Lloyd", "Forgy","MacQueen"), trace=FALSE)
hc <- hclust(dt, method = "average", members = NULL)
hc <- hclust(dt, method = "average", members = NULL)
dt <- dist(mc$hp, method = "euclidean", diag = FALSE, upper = FALSE, p = 2)
hc <- hclust(dt, method = "average", members = NULL)
plot(hc)
library(fpc)
dbscan(mt$hp, 3, MinPts = 2, scale = FALSE,
method = c("hybrid","raw","dist"), seeds = TRUE, showplot = FALSE, countmode = NULL)
dbscan(mc$hp, 3, MinPts = 2, scale = FALSE,
method = c("hybrid","raw","dist"), seeds = TRUE, showplot = FALSE, countmode = NULL)
cars <- mc
cars$hp <- NULL
(kc <- kmeans(cars, 3))
table(mc$hp, kc$cluster)
View(mc)
View(kc)
View(cars)
dim(cars)
names(cars)
View(mc)
table(mc$hp, kc$cluster)
plot(kc)
(kc <- kmeans(cars, 3))
plot(kc)
dt <- dist(kc$hp, method = "euclidean", diag = FALSE, upper = FALSE, p = 2)
kmeans(mc$hp, 5, iter.max = 10, nstart = 1,algorithm = c("Hartigan-Wong", "Lloyd", "Forgy","MacQueen"), trace=FALSE)
dt <- dist(mc$hp, method = "euclidean", diag = FALSE, upper = FALSE, p = 2)
hc <- hclust(dt, method = "average", members = NULL)
plot(hc)
plot(hc)
plot(hc)
table(mc$hp, kc$cluster)
(kc <- kmeans(cars, 3))
(kc <- kmeans(cars, 3))
(kc <- kmeans(cars, 3))
(kc <- kmeans(cars, 3))
(kc <- kmeans(cars, 3, inter.max = 100))
(kc <- kmeans(cars, 3, iter.max = 100))
(kc <- kmeans(cars, 3, iter.max = 100))
(kc <- kmeans(cars, 3, iter.min = 100))
(kc <- kmeans(cars, 3, iter.max = 1000))
(kc <- kmeans(cars, 3, iter.max = 1000))
(kc <- kmeans(cars, 3, iter.max = 1000))
(kc <- kmeans(cars, 3, iter.max = 1000))
(kc <- kmeans(cars, 3, iter.max = 1000))
(kc <- kmeans(cars, 3, iter.max = 1000))
mc <-mtcars
dim(mc)
mc$hp
nrow(mc[duplicated(mc), ])
nrow(mc$hp[duplicated(mc$hp), ])
hpdata <- data.frame(mc$hp)
dim(hpdata)
head(hpdata)
nrow(hpdata[duplicated(hpdata), ])
nrow(hpdata[duplicated(hpdata), ])
nrow(hpdata[!duplicated(hpdata), ])
hpdata[duplicated(hpdata), ]
#Count duplicateds
nrow(hpdata[duplicated(hpdata), ])
distinct(hpdata)
#Count duplicateds
nrow(hpdata[duplicated(hpdata), ])
#Duplicated vector
duplicated(hpdata)
#Eliminating duplicateds information
unique(hpdata)
#Duplicated vector
duplicated(hpdata)
#Count duplicateds
nrow(hpdata[duplicated(hpdata), ])
#Deleting duplicated data in a dataframe
hpdata <- hpdata[!duplicated(hpdata), ]
#Eliminating duplicateds information
unique(hpdata)
#Duplicated vector
duplicated(hpdata)
#Select repeated elements in one or more columns
distinct(hpdata)# If there are more column is necessary specify like distinct(data, column)
#Select repeated elements in one or more columns
distinct(hpdata) # If there are more column is necessary specify like distinct(data, column)
#Count duplicateds
nrow(hpdata[duplicated(hpdata), ])
#Contar hp (dados duplicados)
#nrow(mc$hp[duplicated(mc$hp), ])
hpdata <- data.frame(mc$hp)
#Eliminating duplicateds information
unique(hpdata)
#Duplicated vector
duplicated(hpdata)
#Select repeated elements in one or more columns
distinct(hpdata) # If there are more column is necessary specify like distinct(data, column)
#Count duplicateds
nrow(hpdata[duplicated(hpdata), ])
hpdata[duplicated(hpdata), ]
nrow(hpdata)
hpdata[duplicated(hpdata) ]
hpdata[duplicated(hpdata),, ]
hpdata[duplicated(hpdata), ]
#Count duplicateds
nrow(hpdata[duplicated(hpdata), ])
#Count duplicateds
nrow(hpdata[duplicated(hpdata), ,])
#Show duplicateds
hpdata[duplicated(hpdata), ]
hpdata[duplicated(hpdata), ]
nrow(hpdata)
#Show duplicateds
hpdata[duplicated(hpdata), ]
library(dplyr)
install.packages('dplyr')
install.packages("dplyr")
library(dplyr)
hpdata
hpdata %>% group_by(mc.hp) %>% mutate(counter = row_number())
hpdata %>% group_by(mc.hp) %>% mutate(counter = row_number())
#Show duplicateds
hpdata[duplicated(hpdata), ]
hpdata %>% group_by(mc.hp) %>% mutate(counter = row_number())
table(hpdata)
as.data.frame(table(hpdat))
as.data.frame(table(hpdata))
table(hpdata)
as.data.frame(table(hpdata))
as.data.frame(table(hpdata))
t(hpdata)
diag(hpdata)
dotchart(mc)
dotchart(mc$hp)
sunflowerplot(mc$hp, mc$qsec)
stripplot(mc$hp)
stripplot()
stripplot(mc$hp)
library(lattice)
stripplot(mc$hp)
coplot(mc$hp˜mc$cyl | mc$qsec)
coplot(mc$hp ˜ mc$cyl | mc$qsec)
library(lattice)
attach(scanvote)
#attach(scanvote)
coplot(mc$hp ˜ mc$cyl | mc$qsec)
#attach(scanvote)
coplot(mc$hp ~ mc$cyl | mc$qsec)
coplot(WidthWS ~ DepthWS | CumLen, pch=14+as.integer(Reach), cex=1.5,
number=3, columns=3,
panel=function(x,y,...) {
panel.smooth(x,y,span=.8,iter=5,...)
abline(lm(y ~ x), col="blue")
} )
coplot(mc$hp ~ mc$cyl | mc$qsec, pch=14+as.integer(Reach), cex=1.5,
number=3, columns=3,
panel=function(x,y,...) {
panel.smooth(x,y,span=.8,iter=5,...)
abline(lm(y ~ x), col="blue")
} )
coplot(mc$hp ~ mc$cyl | mc$qsec, pch=14+as.integer(mc$wt), cex=1.5,
number=3, columns=3,
panel=function(x,y,...) {
panel.smooth(x,y,span=.8,iter=5,...)
abline(lm(y ~ x), col="blue")
} )
coplot(mc$hp ~ mc$cyl | mc$qsec, pch=14+as.integer(mc$wt), cex=1.5,
number=5, columns=5,
panel=function(x,y,...) {
panel.smooth(x,y,span=.8,iter=5,...)
abline(lm(y ~ x), col="blue")
} )
coplot(mc$hp ~ mc$cyl | mc$qsec, pch=18+as.integer(mc$wt), cex=1.5,
number=5, columns=5,
panel=function(x,y,...) {
panel.smooth(x,y,span=.8,iter=5,...)
abline(lm(y ~ x), col="blue")
} )
coplot(mc$hp ~ mc$cyl | mc$qsec, pch=18+as.integer(mc$wt), cex=1.9,
number=5, columns=5,
panel=function(x,y,...) {
panel.smooth(x,y,span=.8,iter=5,...)
abline(lm(y ~ x), col="blue")
} )
coplot(mc$hp ~ mc$cyl | mc$qsec, pch=18+as.integer(mc$wt), cex=0.9,
number=5, columns=5,
panel=function(x,y,...) {
panel.smooth(x,y,span=.8,iter=5,...)
abline(lm(y ~ x), col="blue")
} )
coplot(mc$hp ~ mc$cyl | mc$qsec, pch=18+as.integer(mc$wt), cex=1.5,
number=5, columns=5,
panel=function(x,y,...) {
panel.smooth(x,y,span=.8,iter=5,...)
abline(lm(y ~ x), col="blue")
} )
coplot(mc$hp ~ mc$cyl | mc$qsec, pch=15+as.integer(mc$wt), cex=1.5,
number=5, columns=5,
panel=function(x,y,...) {
panel.smooth(x,y,span=.8,iter=5,...)
abline(lm(y ~ x), col="blue")
} )
coplot(mc$hp ~ mc$cyl | mc$qsec, pch=15+as.integer(mc$wt), cex=1.5,
number=10, columns=5,
panel=function(x,y,...) {
panel.smooth(x,y,span=.8,iter=5,...)
abline(lm(y ~ x), col="blue")
} )
coplot(mc$hp ~ mc$cyl | mc$qsec, pch=15+as.integer(mc$wt), cex=1.5,
number=10, columns=10,
panel=function(x,y,...) {
panel.smooth(x,y,span=.8,iter=5,...)
abline(lm(y ~ x), col="blue")
} )
coplot(mc$hp ~ mc$cyl | mc$qsec, pch=15+as.integer(mc$wt), cex=1.5,
number=8, columns=5,
panel=function(x,y,...) {
panel.smooth(x,y,span=.8,iter=5,...)
abline(lm(y ~ x), col="blue")
} )
coplot(mc$hp ~ mc$cyl | mc$qsec, pch=15+as.integer(mc$wt), cex=1.5,
number=5, columns=5,
panel=function(x,y,...) {
panel.smooth(x,y,span=.8,iter=5,...)
abline(lm(y ~ x), col="blue")
} )
coplot(mc$hp ~ mc$cyl | mc$qsec, pch=15+as.integer(mc$wt), cex=1.5,
number=5, columns=5,
panel=function(x,y,...) {
panel.smooth(x,y,span=.3,iter=5,...)
abline(lm(y ~ x), col="blue")
} )
coplot(mc$hp ~ mc$cyl | mc$qsec, pch=15+as.integer(mc$wt), cex=1.5,
number=5, columns=5,
panel=function(x,y,...) {
panel.smooth(x,y,span=.8,iter=5,...)
abline(lm(y ~ x), col="blue")
} )
coplot(mc$hp ~ mc$cyl | mc$qsec, pch=15+as.integer(mc$wt), cex=1.5,
number=5, columns=5,
panel=function(x,y,...) {
panel.smooth(x,y,span=.8,iter=1,...)
abline(lm(y ~ x), col="blue")
} )
coplot(mc$hp ~ mc$cyl | mc$qsec, pch=15+as.integer(mc$wt), cex=1.5,
number=5, columns=5,
panel=function(x,y,...) {
panel.smooth(x,y,span=.8,iter=10,...)
abline(lm(y ~ x), col="blue")
} )
coplot(mc$hp ~ mc$cyl | mc$qsec, pch=15+as.integer(mc$wt), cex=1.5,
number=5, columns=5,
panel=function(x,y,...) {
panel.smooth(x,y,span=.8,iter=10,...)
abline(lm(y ~ x), col="green")
} )
coplot(mc$hp ~ mc$cyl | mc$qsec, pch=15+as.integer(mc$wt), cex=1.5,
number=5, columns=5,
panel=function(x,y,...) {
panel.smooth(x,y,span=.8,iter=10,...)
abline(lm(y ~ x), col="blue")
} )
attach(sumcr)
coplot(Yes ~ log10(mc$cyl) | Country, columns=3,
panel=function(x,y,...) {
panel.smooth(x,y,span=.8,iter=5,...)
abline(lm(y ~ x), col="blue") } )
coplot(mc$hp ~ log10(mc$cyl) | Country, columns=3,
panel=function(x,y,...) {
panel.smooth(x,y,span=.8,iter=5,...)
abline(lm(y ~ x), col="blue") } )
coplot(mc$hp ~ log10(mc$cyl) | mc$qsec, columns=3,
panel=function(x,y,...) {
panel.smooth(x,y,span=.8,iter=5,...)
abline(lm(y ~ x), col="blue") } )
sin(mc$hp)
cos(mc$hp)
tag(mc$hp)
tan(mc$hp)
log(mc$hp)
log10(mc$hp)
log(mc$hp,3)
log(mc$hp,1)
log(mc$hp,0)
log(mc$hp,2)
log(mc$hp,3)
log(mc$hp,6)
mc <-mtcars
dim(mc)
##################################################################
##################Contar hp (dados duplicados)####################
#nrow(mc$hp[duplicated(mc$hp), ])
hpdata <- data.frame(mc$hp)
head(hpdata)
dim(hpdata)
hpdata
#Select repeated elements in one or more columns
distinct(hpdata) # If there are more column is necessary specify like distinct(data, column)
table(hpdata)
hist(mc$hp)
density(mc$hp)
plot(density(mc$hp))
barplot(mc$hp)
pie(table(mc$hp))
#attach(sumcr)
coplot(mc$hp ~ mc$cyl | mc$qsec, pch=15+as.integer(mc$wt), cex=1.5,
number=5, columns=5,
panel=function(x,y,...) {
panel.smooth(x,y,span=.8,iter=10,...)
abline(lm(y ~ x), col="blue")
} )
log(mc$hp,6)
cars <- mc
cars$hp <- NULL
(kc <- kmeans(cars, 3, iter.max = 1000))
table(mc$hp, kc$cluster)
dt <- dist(mc$hp, method = "euclidean", diag = FALSE, upper = FALSE, p = 2)
hc <- hclust(dt, method = "average", members = NULL)
plot(hc)
c <-mtcars
(kc <- kmeans(c,3))
kc
kc$cluster
